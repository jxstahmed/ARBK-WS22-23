
Polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001e2  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  0000027a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000802  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f9  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031a  00000000  00000000  00001217  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001534  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041d  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001995  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 98 00 	call	0x130	; 0x130 <main>
  9e:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z16ports_einrichtenv>:
int aus = LED9;
bool blinkt = true;

void ports_einrichten()
{
	DDRD = 0xff;										// Wir setzen das DDRD als Ausgang.
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  aa:	1b b8       	out	0x0b, r1	; 11
	
	DDRB = 0x00;										// Wir setzen das DDRB als Eingang.
  ac:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xff;
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	08 95       	ret

000000b2 <_Z6tasterv>:
}

void taster()
{
	if(!(PINB & (1 << SW1)))							// Wenn der Taster SW1 gedrückt wird
  b2:	18 99       	sbic	0x03, 0	; 3
  b4:	1d c0       	rjmp	.+58     	; 0xf0 <_Z6tasterv+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	8f e3       	ldi	r24, 0x3F	; 63
  b8:	9c e9       	ldi	r25, 0x9C	; 156
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <_Z6tasterv+0x8>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_Z6tasterv+0xe>
  c0:	00 00       	nop
	{
		_delay_ms(10);									// Delay um drücken der Taster besser abzulesen.
		if(!(PINB & (1 << SW1)))
  c2:	18 99       	sbic	0x03, 0	; 3
  c4:	15 c0       	rjmp	.+42     	; 0xf0 <_Z6tasterv+0x3e>
		{
			if(PIND & (1 << LED0))						// Wenn die LED0 an ist
  c6:	48 9b       	sbis	0x09, 0	; 9
  c8:	07 c0       	rjmp	.+14     	; 0xd8 <_Z6tasterv+0x26>
			{
				blinkt ^= 1;							// Wir ändern den Status der LED [Blinken -> Leuchten oder Leuchten -> Blinken]
  ca:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	89 27       	eor	r24, r25
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  d6:	0c c0       	rjmp	.+24     	; 0xf0 <_Z6tasterv+0x3e>
			}
			else if(PIND & (1 << LED9))					// Wenn die LED9 an ist, schalten wir um auf die LED0.
  d8:	49 9b       	sbis	0x09, 1	; 9
  da:	0a c0       	rjmp	.+20     	; 0xf0 <_Z6tasterv+0x3e>
			{
				aus = LED9;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <aus+0x1>
  e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <aus>
				an = LED0;
  e8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
  ec:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			}
		}
	}
	
	if(!(PINB & (1 << SW2)))							// Wenn der Taster SW2 gedrückt wird
  f0:	19 99       	sbic	0x03, 1	; 3
  f2:	1d c0       	rjmp	.+58     	; 0x12e <_Z6tasterv+0x7c>
  f4:	8f e3       	ldi	r24, 0x3F	; 63
  f6:	9c e9       	ldi	r25, 0x9C	; 156
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <_Z6tasterv+0x46>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <_Z6tasterv+0x4c>
  fe:	00 00       	nop
	{
		_delay_ms(10);									// Delay um drücken der Taster besser abzulesen.
		if(!(PINB & (1 << SW2)))
 100:	19 99       	sbic	0x03, 1	; 3
 102:	15 c0       	rjmp	.+42     	; 0x12e <_Z6tasterv+0x7c>
		{
			if(PIND & (1 << LED9))						// Wenn die LED9 an ist
 104:	49 9b       	sbis	0x09, 1	; 9
 106:	07 c0       	rjmp	.+14     	; 0x116 <_Z6tasterv+0x64>
			{
				blinkt ^= (1 << 0);						// Wir ändern den Status der LED [Blinken -> Leuchten oder Leuchten -> Blinken]
 108:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	89 27       	eor	r24, r25
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 114:	08 95       	ret
			}
			else if((PIND & (1 << LED0)))				// Wenn die LED0 an ist, schalten wir um auf die LED9.
 116:	48 9b       	sbis	0x09, 0	; 9
 118:	0a c0       	rjmp	.+20     	; 0x12e <_Z6tasterv+0x7c>
			{
				aus = LED0;
 11a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <aus+0x1>
 11e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <aus>
				an = LED9;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 12a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 12e:	08 95       	ret

00000130 <main>:
	}
}

int main(void)
{
	ports_einrichten();
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z16ports_einrichtenv>
			PORTD &= ~(1UL << aus);						// Ich nutze UL statt int, da bei berechnungen sonst Fehler auftreten. [Manchmal leuchten beide LEDs beim wechseln]
			PORTD ^= (1 << an);
		}
		else
		{
			PORTD &= ~(1UL << aus);
 134:	0f 2e       	mov	r0, r31
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	ef 2e       	mov	r14, r31
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	ff 2e       	mov	r15, r31
 13e:	f0 2d       	mov	r31, r0
 140:	81 2c       	mov	r8, r1
 142:	91 2c       	mov	r9, r1
 144:	54 01       	movw	r10, r8
 146:	83 94       	inc	r8
			PORTD |= ( 1 << an);
 148:	04 e0       	ldi	r16, 0x04	; 4
 14a:	11 e0       	ldi	r17, 0x01	; 1
 14c:	c1 e0       	ldi	r28, 0x01	; 1
 14e:	d0 e0       	ldi	r29, 0x00	; 0
int main(void)
{
	ports_einrichten();
	while (1)
	{
		taster();
 150:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z6tasterv>
		if (blinkt)
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 158:	88 23       	and	r24, r24
 15a:	e1 f0       	breq	.+56     	; 0x194 <main+0x64>
		{
			PORTD &= ~(1UL << aus);						// Ich nutze UL statt int, da bei berechnungen sonst Fehler auftreten. [Manchmal leuchten beide LEDs beim wechseln]
 15c:	9b b1       	in	r25, 0x0b	; 11
 15e:	b5 01       	movw	r22, r10
 160:	a4 01       	movw	r20, r8
 162:	f7 01       	movw	r30, r14
 164:	00 80       	ld	r0, Z
 166:	04 c0       	rjmp	.+8      	; 0x170 <main+0x40>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	66 1f       	adc	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	0a 94       	dec	r0
 172:	d2 f7       	brpl	.-12     	; 0x168 <main+0x38>
 174:	40 95       	com	r20
 176:	84 2f       	mov	r24, r20
 178:	89 23       	and	r24, r25
 17a:	8b b9       	out	0x0b, r24	; 11
			PORTD ^= (1 << an);
 17c:	2b b1       	in	r18, 0x0b	; 11
 17e:	ce 01       	movw	r24, r28
 180:	f8 01       	movw	r30, r16
 182:	00 80       	ld	r0, Z
 184:	02 c0       	rjmp	.+4      	; 0x18a <main+0x5a>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <main+0x56>
 18e:	82 27       	eor	r24, r18
 190:	8b b9       	out	0x0b, r24	; 11
 192:	1b c0       	rjmp	.+54     	; 0x1ca <main+0x9a>
		}
		else
		{
			PORTD &= ~(1UL << aus);
 194:	9b b1       	in	r25, 0x0b	; 11
 196:	b5 01       	movw	r22, r10
 198:	a4 01       	movw	r20, r8
 19a:	f7 01       	movw	r30, r14
 19c:	00 80       	ld	r0, Z
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <main+0x78>
 1a0:	44 0f       	add	r20, r20
 1a2:	55 1f       	adc	r21, r21
 1a4:	66 1f       	adc	r22, r22
 1a6:	77 1f       	adc	r23, r23
 1a8:	0a 94       	dec	r0
 1aa:	d2 f7       	brpl	.-12     	; 0x1a0 <main+0x70>
 1ac:	40 95       	com	r20
 1ae:	84 2f       	mov	r24, r20
 1b0:	89 23       	and	r24, r25
 1b2:	8b b9       	out	0x0b, r24	; 11
			PORTD |= ( 1 << an);
 1b4:	2b b1       	in	r18, 0x0b	; 11
 1b6:	ce 01       	movw	r24, r28
 1b8:	f8 01       	movw	r30, r16
 1ba:	00 80       	ld	r0, Z
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <main+0x92>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <main+0x8e>
 1c6:	82 2b       	or	r24, r18
 1c8:	8b b9       	out	0x0b, r24	; 11
 1ca:	ff ef       	ldi	r31, 0xFF	; 255
 1cc:	23 ec       	ldi	r18, 0xC3	; 195
 1ce:	89 e0       	ldi	r24, 0x09	; 9
 1d0:	f1 50       	subi	r31, 0x01	; 1
 1d2:	20 40       	sbci	r18, 0x00	; 0
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0xa0>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0xaa>
 1da:	00 00       	nop
 1dc:	b9 cf       	rjmp	.-142    	; 0x150 <main+0x20>

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
